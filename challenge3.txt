List challenge problems completed as part of the lab 3 handin, as well
as the problem number.  If you worked any previous lab challenges and
submitted them with this lab, list them here, along with the lab number.


=====================
Lab 2 - Challenge 2

Get page table entry using pml4e_walk() function.

-------------------------------------------------
mon_showmappings(int argc, char **argv, struct Trapframe *tf)
{
	uintptr_t startva, endva;
	pte_t *pte;

	startva = atoi(argv[1]);
	endva = atoi(argv[2]);

	if (startva > endva) {
		cprintf("Invalid input 0x%x ~ 0x%x:\n", startva, endva);
		return -1;
	}

	for (; startva <= endva; startva += PGSIZE) {
		pte = pml4e_walk(boot_pml4e, (void *) startva, 0);	

		if (pte) {
			cprintf("0x%x ===> 0x%x (%s)\n", 
				startva, 
				PTE_ADDR(*pte),
				(*pte & (PTE_W | PTE_U)) ? "PTE_W | PTE_U | PTE_P" :
					(*pte & PTE_W) ? "PTE_W | PTE_P" :
						(*pte & PTE_U) ? "PTE_U | PTE_P" :
							(*pte & PTE_P) ? "PTE_P" : "Not Present");
		} else {
			cprintf("0x%x ===> 0x%x (%s)\n", 
				startva, 
				0,
				"Not Present");
		}
	}
	return 0;
}

-------------------------------------------------

Now test it in JOS:

Welcome to the JOS kernel monitor!
Type 'help' for a list of commands.
K> printmapping 0x8004000000 0x8004010000
0x8004000000 ===> 0x0 (PTE_W | PTE_U | PTE_P)
0x8004001000 ===> 0x1000 (PTE_W | PTE_U | PTE_P)
0x8004002000 ===> 0x2000 (PTE_W | PTE_U | PTE_P)
0x8004003000 ===> 0x3000 (PTE_W | PTE_U | PTE_P)
0x8004004000 ===> 0x4000 (PTE_W | PTE_U | PTE_P)
0x8004005000 ===> 0x5000 (PTE_W | PTE_U | PTE_P)
0x8004006000 ===> 0x6000 (PTE_W | PTE_U | PTE_P)
0x8004007000 ===> 0x7000 (PTE_W | PTE_U | PTE_P)
0x8004008000 ===> 0x8000 (PTE_W | PTE_U | PTE_P)
0x8004009000 ===> 0x9000 (PTE_W | PTE_U | PTE_P)
0x800400a000 ===> 0xa000 (PTE_W | PTE_U | PTE_P)
0x800400b000 ===> 0xb000 (PTE_W | PTE_U | PTE_P)
0x800400c000 ===> 0xc000 (PTE_W | PTE_U | PTE_P)
0x800400d000 ===> 0xd000 (PTE_W | PTE_U | PTE_P)
0x800400e000 ===> 0xe000 (PTE_W | PTE_U | PTE_P)
0x800400f000 ===> 0xf000 (PTE_W | PTE_U | PTE_P)
0x8004010000 ===> 0x10000 (PTE_W | PTE_U | PTE_P)
-------------------------------------------------



=====================
Lab 3 - Challenge 1

Here are the macros in my trapentry.S automatically generating table for trap.c:

-------------------------------------------------
.set num, 64

// Generate trap handler, all calling _alltraps
.altmacro
.macro GEN_TRAP_HANDLERS n
	.if \n > 0
		GEN_TRAP_HANDLERS %(n-1)
	.endif

	// CPU push error code for exception
	//  13 - general protection
	.if \n == 13
		TRAPHANDLER(XTRPX_\n, \n)
	//  14 - page fault
	.elseif \n == 14
		TRAPHANDLER(XTRPX_\n, \n)
	.else
		TRAPHANDLER_NOEC(XTRPX_\n, \n)
	.endif
.endm

// Set entry
.macro SET_ENTRY name
	.quad \name
.endm

// Generate handler table
.altmacro
.macro GEN_TRAP_TABLE n
	.globl entrytable
	.align 2;	// align by 4 bytes
	entrytable:
	GEN_TRAP_TABLE_0 \n
.endm

.macro GEN_TRAP_TABLE_0 n
	.if \n > 0
		GEN_TRAP_TABLE_0 %(n-1)
	.endif
	SET_ENTRY XTRPX_\n
.endm


.text
	// Expand macro here!
	GEN_TRAP_HANDLERS %(num)
-------------------------------------------------

The generated code are like these as followed:

student@vl56:~/lab$ objdump -D obj/kern/trapentry.o 

obj/kern/trapentry.o:     file format elf64-x86-64


Disassembly of section .text:

0000000000000000 <XTRPX_0>:
   0:	6a 00                	pushq  $0x0
   2:	6a 00                	pushq  $0x0
   4:	e9 25 02 00 00       	jmpq   22e <_alltraps>
   9:	90                   	nop

000000000000000a <XTRPX_1>:
   a:	6a 00                	pushq  $0x0
   c:	6a 01                	pushq  $0x1
   e:	e9 1b 02 00 00       	jmpq   22e <_alltraps>
  13:	90                   	nop

		......

0000000000000082 <XTRPX_13>:
  82:	6a 0d                	pushq  $0xd
  84:	e9 a5 01 00 00       	jmpq   22e <_alltraps>
  89:	90                   	nop

000000000000008a <XTRPX_14>:
  8a:	6a 0e                	pushq  $0xe
  8c:	e9 9d 01 00 00       	jmpq   22e <_alltraps>
  91:	90                   	nop
	
		......

0000000000000228 <XTRPX_64>:
 228:	6a 00                	pushq  $0x0
 22a:	6a 40                	pushq  $0x40
 22c:	eb 00                	jmp    22e <_alltraps>
-------------------------------------------------



=====================
Lab 3 - Challenge 2

Set TF bit in eflags in Trapframe while single step debugging.
Then resume execution of user program by env_run() with TF enabled.
At last, clear TF bit to continue the execution.

-------------------------------------------------
int
mon_singlestep(int argc, char **argv, struct Trapframe *tf)
{
	uint64_t eflags;

	cprintf("Current position: %016llx \n", tf->tf_rip);
	
	// Set eflags in tf, nor eflag register
	tf->tf_eflags |= FL_TF;

	// Breakpoint from user mode, curenv should be there in running state 
	if ((tf->tf_cs & 3) == 3) {
		assert(curenv && curenv->env_status == ENV_RUNNING);
		env_run(curenv);
	} else {
		panic("Breakpoint from kernel");
	}
	
	return 0;
}


int
mon_continue(int argc, char **argv, struct Trapframe *tf)
{
	uint64_t eflags;

	cprintf("Continue execution");

	// Reset eflags's TF bit
	if (tf->tf_eflags & FL_TF)
		tf->tf_eflags &= ~FL_TF;

	// Breakpoint from user mode, curenv should be there in running state 
	if ((tf->tf_cs & 3) == 3) {
		assert(curenv && curenv->env_status == ENV_RUNNING);
		env_run(curenv);
	} else {
		panic("Breakpoint from kernel");
	}
	
	return 0;
}
-------------------------------------------------

Add a print statement in 'breakpoint' program, then test it in JOS:

student@vl56:~/lab$ make run-breakpoint-nox
Incoming TRAP frame at 0x8003ffff40
Welcome to the JOS kernel monitor!
Type 'help' for a list of commands.
TRAP frame at 0x80043ac000
  r15  0x00000000
  r14  0x00000000
  r13  0x00000000
  r12  0x00000000
  r11  0x00000000
  r10  0x00000000
  r9  0x00000000
  r8  0x00000000
  rdi  0x00000000
  rsi  0x00000000
  rbp  0xef7fdfc0
  rbx  0x00000000
  rdx  0x00000000
  rcx  0x00000000
  rax  0x00800043
  es   0x----0023
  ds   0x----0023
  trap 0x00000003 Breakpoint
  err  0x00000000
  rip  0x00800053
  cs   0x----001b
  flag 0x00000002
  rsp  0xef7fdfb0
  ss   0x----0023

K> si
Current position: 0000000000800053 
Incoming TRAP frame at 0x8003ffff40
Welcome to the JOS kernel monitor!
Type 'help' for a list of commands.

K> continue
Continue executionIncoming TRAP frame at 0x8003ffff40
TRAP frame at 0x80043ac000
	......

hello! i'm resumed from breakpoint 

Incoming TRAP frame at 0x8003ffff40
TRAP frame at 0x80043ac000
	......
[00001000] exiting gracefully
[00001000] free env 00001000
Destroyed the only environment - nothing more to do!
Welcome to the JOS kernel monitor!
Type 'help' for a list of commands.
-------------------------------------------------

