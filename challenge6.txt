List challenge problems completed as part of the lab 6 handin, as well
as the problem number.  If you worked any previous lab challenges and
submitted them with this lab, list them here, along with the lab number.

================================================================
		Lab 6a - Challenge 2: Zero-Copy
================================================================

Since user-space buffer is already mapped into OUTPUT env during IPC,
we could get physical address of user buffer through OUTPUT page table.
Then rather than copy user buffer to transmit ring buffer, we pass 
the its physical address to network device directly.

For simplicity, we forget the pre-allocated ring buffer for a moment.
We can restore the address in Transmit Descriptor easily later.

At last, add a new system call named sys_send_packet_direct() and
let OUTPUT env use the new function to send packet.

int send_packet_direct(void *packet, size_t len)
{
	struct tx_desc *tx;
	struct PageInfo *srcpp;
	pte_t *pte;

	// 1.Check if ring buffer is full
	tx = &tx_ring[netipc[E1000_TDT]];
	if (!(tx->status & E1000_TXD_STAT_DD)) {
		cprintf("Transmitting ring buffer is full\n");
		return -1;
	}
	tx->status &= ~E1000_TXD_STAT_DD;

	// 2.Copy buffer and update TDT
	//memcpy((void *) KADDR(tx->addr), packet, len); 
	
	/*
	 * Challenge 2: Zero-copy transmit
	 * 	Rather than copy, use user-space buffer directly, which is already mapped in OUTPUT env during IPC.
	 * 	So try to get its corresponding physical address with OUTPUT page table, and pass it to network device.
	 */
	if (!(srcpp = page_lookup(curenv->env_pml4e, packet, &pte)))
		return -1;
	tx->addr = page2pa(srcpp) + PGOFF(packet);
	tx->length = len;

	// 3.Set RS bit to make NIC report status when send complete
	tx->cmd |= (E1000_TXD_CMD_RS | E1000_TXD_CMD_EOP);

	netipc[E1000_TDT] = (netipc[E1000_TDT] + 1) % MAX_TX_NUM;

	return 0;
}

================================================================
		Lab 5 - Challenge 2: Cache Eviction
================================================================

A simple second-chance algorithm is implemented here. The active array in struct Usage maintains the block in use.
It works as a ring buffer and reclaim one block when it is full. Before performing reclaimation, it checks the 
"Accessed" bit to give a second chance. If all blocks are accessed recently, then just reclaim the one at first.

------------------------------------------------------------------------
#define CACHE_THRESHOLD 10

struct Usage {
	uint64_t active[CACHE_THRESHOLD];
	uint32_t head, tail;
} usage = { .head = 0, .tail = 0 };

static void
bc_reclaim(uint64_t blockno)
{
	int i;
	void *va;

	// 0.Bypass bootsector, superblock, bitmap, ibitmap, 2*itable
	if (blockno <= 5)
		return;

	// 1.Bookkeep block usage
	//cprintf(" Pgfault block: %d\n", blockno);
	usage.active[usage.tail] = blockno;
	usage.tail = (usage.tail + 1) % CACHE_THRESHOLD;

	// 2.Check if cache memory is above threshold
	if (usage.head == usage.tail) {

		// 3.Second-Chance replacement algorithm
		// 3.1 Look for a victim
		for (i = usage.head; i <= usage.tail; i = (i+1) % CACHE_THRESHOLD) {
			va = diskaddr(usage.active[i]);
			if (uvpt[PGNUM(va)] & PTE_A) {
				// Restore "accessed" bit and give it a second chance
				sys_page_map(0, va, 0, va, uvpt[PGNUM(va)] & ~PTE_A);
				continue;
			}
		}

		// 3.2 All blocks are accessed, then just reclaim the head
		if (i == (usage.tail + 1) % CACHE_THRESHOLD) {
			i = usage.head;
			va = diskaddr(usage.active[i]);
		}

		// 3.3 Perform reclaimation
		//cprintf(" Reclaim block: %d\n", usage.active[i]);
		flush_block(va);
		sys_page_unmap(0, va);

		// 3.4 Move head pointer
		usage.head = (usage.head + 1) % CACHE_THRESHOLD;
	}
}
------------------------------------------------------------------------

static void
bc_pgfault(struct UTrapframe *utf)
{
	void *addr = (void *) utf->utf_fault_va;
	uint64_t blockno = ((uint64_t)addr - DISKMAP) / BLKSIZE;
	int r;

	// Check that the fault was within the block cache region
	if (addr < (void*)DISKMAP || addr >= (void*)(DISKMAP + DISKSIZE))
		panic("page fault in FS: eip %08x, va %08x, err %04x",
		      utf->utf_rip, addr, utf->utf_err);

	......
	// Lab 5 - Challenge 2
	bc_reclaim(blockno);
	......
}

================================================================
		Lab 5 - Challenge 4: Add Inode
================================================================

1) Add 'struct inode' with metadata moved from 'struct File' which makes 'struct File' real dir entry:
-------------------------------------------------------------------------
struct File {
	char f_name[MAXNAMELEN];	// filename
	uint32_t i_ino; 		// inode number
	//off_t f_size;			// file size in bytes
	//uint32_t f_type;		// file type

	// Block pointers.
	// A block is allocated iff its value is != 0.
	//uint32_t f_direct[NDIRECT];	// direct blocks
	//uint32_t f_indirect;		// indirect block

	// Pad out to 256 bytes; must do arithmetic in case we're compiling
	// fsformat on a 64-bit machine.
	uint8_t f_pad[256 - MAXNAMELEN - 4 /*- 8 - 4*NDIRECT - 4*/];
} __attribute__((packed));	// required only on some 64-bit machines

struct inode {
	char f_name[MAXNAMELEN];	// filename
	off_t f_size;			// file size in bytes
	uint32_t f_type;		// file type

	// Block pointers.
	// A block is allocated iff its value is != 0.
	uint32_t f_direct[NDIRECT];	// direct blocks
	uint32_t f_indirect;		// indirect block

	uint32_t i_ino;
	uint32_t i_nlink;

	// Pad out to 256 bytes; must do arithmetic in case we're compiling
	// fsformat on a 64-bit machine.
	uint8_t f_pad[256 - MAXNAMELEN - 8 - 4*NDIRECT - 4 - 8];
} __attribute__((packed));	// required only on some 64-bit machines
------------------------------------------------------------------------

2) Modify fs/fsformat.c to allocate and generate inode on image file:

---------------------------------------------------------
uint32_t *ibitmap;
struct inode *itable;

static
uint32_t
alloc_inode()
{
	int i;
	for (i = 0; i < 32; i++) {
		if (ibitmap[i / 32] & (1 << (i % 32))) {
			ibitmap[i/32] &= ~(1<<(i%32));
			return i;
		}
	}
	panic("No free inode");
	return 0;
}

struct inode *
diradd(struct Dir *d, uint32_t type, const char *name)
{
	struct File *out = &d->ents[d->n++];
	if (d->n > MAX_DIR_ENTS)
		panic("too many directory entries");
	strcpy(out->f_name, name);
	//out->f_type = type;
	//return out;

	// Lab 5 - Challenge 4
	uint32_t i_ino = alloc_inode();
	struct inode *inode = &itable[i_ino];
	strcpy(inode->f_name, name);
	inode->f_type = type;
	inode->i_ino = i_ino;
	inode->i_nlink = 1;
	out->i_ino = i_ino;
	return inode;
}
---------------------------------------------------------

3) Modify fs/fs.c to replace struct File with inode.
  Too many modifications, here is only one place:

---------------------------------------------------------
int
file_create(const char *path, struct inode **pf)
{
	char name[MAXNAMELEN];
	int r;
	struct inode *dir, *ff;
        struct File *f;

	if ((r = walk_path(path, &dir, &ff, name)) == 0)
		return -E_FILE_EXISTS;
	if (r != -E_NOT_FOUND || dir == 0)
		return r;
	if ((r = dir_alloc_file(dir, &f)) < 0)
		return r;
	strcpy(f->f_name, name);

	// Lab 5 - Challenge 5
	uint32_t i_ino = alloc_inode();
	f->i_ino = i_ino;
	*pf = itable + i_ino;
	(*pf)->i_nlink = 1;
	(*pf)->i_ino = i_ino;
	strcpy((*pf)->f_name, name);

	//*pf = f;
	file_flush(dir);
	return 0;
}
---------------------------------------------------------

4) Share inode by incrementing i_nlink when creating hard link:

---------------------------------------------------------
int file_link(const char *srcpath, const char *dstpath)
{
	char name[MAXNAMELEN];
	int r;
	struct inode *dir, *ff;
        struct File *f;
	struct inode *src;

	if ((r = walk_path(dstpath, &dir, &ff, name)) == 0)
		return -E_FILE_EXISTS;
	if (r != -E_NOT_FOUND || dir == 0)
		return r;
	if ((r = dir_alloc_file(dir, &f)) < 0)
		return r;

	strcpy(f->f_name, name);

	// inode.f_name is useless if nlink > 1
	if ((r = walk_path(srcpath, &dir, &src, name)) < 0)
		return r;
	f->i_ino = src->i_ino;
	src->i_nlink++;

	flush_block(src);

	file_flush(dir);
	return 0;
}
----------------------------------------------------------

5) Add user/ln.c as 'ln' command source file:

-------------------------------------
#include <inc/lib.h>

void
ln(const char *src, const char *dst)
{
	link(src, dst);
}

void
umain(int argc, char **argv)
{
	ln(argv[1], argv[2]);
}
------------------------------------

6) Test 'ln' command:
--------------------------------------
student@vl56:~/lab$ make run-icode-nox
$ ls
bin
sbin
newmotd
motd
robig
lorem
script
testshell.key
testshell.sh

$ ln motd motd2

$ ls
bin
sbin
newmotd
motd
robig
lorem
script
testshell.key
testshell.sh
motd2
---------------------------------------
